var searchIndex = {};
searchIndex['small_step_simple'] = {"items":[[0,"","small_step_simple","This is an implementation of the small-step approach to the SIMPLE language as introduced by\n[Tom Stuart](https://twitter.com/tomstuart) in \"Understanding Computation\", Chapter 1, \"The Meaning of Programs\".\nSee his website: <http://computationbook.com/>."],[3,"Machine","","Our virtual machine, executing our constructed AST step-by-step"],[4,"Element","","Our AST elements."],[13,"Number","","A simple number object, this cannot be reduced further.",0],[13,"Add","","An addition of two elements.",0],[13,"Multiply","","A multiplication of two elements.",0],[13,"Boolean","","A simple boolean object, this cannot be reduced further.",0],[13,"LessThan","","A less-than relation check of two elements. Elements should reduce to a number to be\ncomparable.",0],[13,"Variable","","A variable, will be replaced by its value when reducing.",0],[13,"Assign","","A variable assignment. Only completely reduced values are assigned. No type checks.",0],[13,"Sequence","","A sequence of two elements. The first element is reduced completely before the second is\ntouched.",0],[13,"IfElse","","A if-else block. Condition needs to reduce to a Boolean. No type checking.\nIf `condition` reduces to true, the `consequence` is used furhter, otherwise the `alternative`",0],[13,"While","","A while loop. Runs until the `condition` reduces to false.",0],[13,"DoNothing","","A simple no-op statement.",0],[11,"eq","","",0],[11,"ne","","",0],[11,"clone","","",0],[11,"fmt","","Output a user-readable representation of the expression",0],[11,"is_reducible","","Wether or not an expression is reducible. See Element for more info.",0],[11,"value","","Get the actual value of a Number.\nFails for other elements than Number and Boolean.\nBoolean maps to Integers: true=1, false=0.",0],[11,"reduce","","Reduce the expression according to the rules for the current element.",0],[11,"new","","Create a new machine with a given expression and an environment",1],[11,"new_with_empty_env","","Create a new machine with a given expression and an _empty_ environment",1],[11,"clone_env","","As the environment is passed in immutable, we need to clone it to get it back",1],[11,"step","","Reduce one step of our current expression",1],[11,"run","","Reduce until we reached a non-reducible expression.\nThis prints the current expression before each step.",1]],"paths":[[4,"Element"],[3,"Machine"]]};
initSearch(searchIndex);
